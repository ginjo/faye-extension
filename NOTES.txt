I've been modularizing my core Faye tools (ruby) to the point where they are fitting nicely into a gem who's primary focus is a class for Faye::Extension. This gem provides two enhancements for Faye: 1, an Extension class that makes creation of server extensions even easier, moving common code into helper methods. 2, provides further helpers to facilitate Faye functionality that is universal to all of my projects, especially where extensions are concerned.

I've gathered up a number of questions along the way. I know there is a lot to consider here, so I don't expect a fully comprehensive answer to all of them. Instead, I'll just jot down the questions, and post them for all to consider.

I'm particularly interested in jcoglin's thoughts on this, especially if he has objections to my creation of a 'faye-extension' gem. Is a faye-extension gem a useful addition to the community, or should I maintain it as a private implementation for my specific projects? Or should I offer the Extension class as a PR to the Faye gem?


The current code is [here on github](https://github.com/ginjo/faye-extension-ruby).

So, here are my amassed questions (with a big thanks for the outstanding Faye project!).


* Is there a use case for mutliple adapters/servers in a single process?

* Should Faye extensions always be added to every running adapter,
  or could there be a case where two adapters running in same process
  would have different extensions?

* Is clientId an appropriate string to use as a client-specific
  channel for private client-server communication?

      client.subscribe("/ak3kdkfjlksd89f98s98dflkjfdfkjkjsd8f78s7dfk")

  Basically, I subscribe every client to it's own private channel,
  whenever the client opens a connection.

  This has been working very well for me, as server-extensions
  always know where to send client-specific messages. And so far,
  no cliendId's are leaked to any other clients.

* Is the following seperation-of-concerns appropriate for Faye?

  I have created an architecture where Faye is only concerned with
  who gets what message. No part of my Faye system has any knowledge
  of what to do with the messages or what they mean. Message processing
  is handled by a separate layer on both client and server.

  Under this architecture, any channel on any client could potentially
  receive any kind of message (chat, data-update, alert, etc..). It's
  up to my message-processing layer to determine what to do next.

* Some of the helpers in faye-extension make use of direct calls to Redis.
  I understand this is treading on unstable ground... But is this acceptable
  practice in the domain of a 'gem', where responsiblity for upkeep and
  compatibility is centralized and well-defined?

* Consider renaming the gem to 'fayezer' or 'fayeser'.

* Add tests, specs.

* Consider if Faye::Extensible is of use in this library.
    https://www.rubydoc.info/gems/faye/1.2.4/Faye/Extensible

* According to J.Coglan, Faye runs on top of websockets (faye-websocket).
  I always thought it was the other way around, but no.
  So faye is definitly more capable than basic websockets for being a
  general purpose communication conduit for real-time web applications!

* Anything that is published to '/meta/...' will not be distributed to other clients.
  Only the server will receive this message.
  
* think there are several layers of functionality I'm working towards here. So this gem is becoming
  one of multiple concerns.
  
  1. Enhancing Faye-Ruby with some Extension sugar.
  2. Providing a way for clients (browsers) to easily create private server subscriptions.
     a. Automatic
     b. Secure
     c. Simple implementation on client AND server.
  3. Providing a message structure that can handle a variety of application needs.
     a. Chat messages
     b. Data updates
     c. Remote calls/responses
     d. Administrative tasks
     
â€¢ Having this gem loaded in ruby is currently breaking the inner workings of faye.
  Specifically, it breaks the faye_adapter.on(<action-label>) event triggers.
  It also causes an error when redis is loaded.
  
  UPDATE: I think this is expected behavior caused by the creation of message['error']
  in one of the extensions. This will halt all further processing of the message, within
  extension AND on the actual backend engine.
  
* Need to redo the entire gem to be less obtrusive.

