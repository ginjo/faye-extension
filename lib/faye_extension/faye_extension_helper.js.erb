// JS FUNCTIONS
// TODO: extract knockout & custom functions back into 'websocket_faye_redis_knockout' example app


hostname = document.location.hostname;
portnum = document.location.port;
endpoint = "<%= endpoint %>";

// Call function by name.
// See http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string
function callFunc(functionName, context /*, args */) {
	var args = Array.prototype.slice.call(arguments, 2);
	var namespaces = functionName.split(".");
	var func = namespaces.pop();
	for (var i = 0; i < namespaces.length; i++) {
    context = context[namespaces[i]];
	}
  return context[func].apply(context, args);
}

// Do something with received published message.
function handlePublishedMessage(message){
	//console.log('HANDLING PUBLISHED MESSAGE: ' + JSON.stringify(message));
	//console.log('handlePublishedMessage', message);
	func = message['action'];
	args = message['data'];
	callFunc(func, window, args);
	//appendMessagesToTable(message);
}

function fayeSubscribe(ch, fn) {
	faye.unsubscribe(ch);
	var subscription = faye.subscribe(ch, fn);
	//subscription.then(function(){console.log('Subscribed', ch)});
	return subscription
}

// // Subscribe to private channel (to/from server)
// function subscribePrivate(uuid) {
// 	faye_client_uuid = (typeof(uuid) === "undefined" ? faye._dispatcher.clientId : uuid);
//   // private_channel_subscription = fayeSubscribe('/' + faye_client_uuid, handlePublishedMessage);
//   private_channel_subscription = fayeSubscribe('/private/server', handlePublishedMessage);
// 
//   return faye_client_uuid;
// }

function faye_client_uuid(){faye._dispatcher.clientId}

function getTimestamp(){
	return (new Date(Date.now()).toString());
}

FayeExt = {
  incoming: function(message, callback) {
    //if(message['channel'] != '/meta/connect') {console.log('faye-incoming', message)}
    if(message['ext']['private_subscription_response'] == true && message['channel'] == '/meta/subscribe'){
			private_subscription = message['subscription'];
			faye._channels._channels[private_subscription] = faye._channels._channels['/private/server'];
			faye._channels._channels[private_subscription]['id'] = private_subscription
			faye._channels._channels[private_subscription]['name'] = private_subscription
			delete faye._channels._channels['/private/server'];
		}
    callback(message);
  },
  // outgoing: function(message, callback) {
  //   console.log('outgoing', message);
  //   callback(message);
  // }
};
// client.addExtension(FayeExt);

// DOM LOADED
document.addEventListener("DOMContentLoaded", function() {
	// Connect to fay server
	faye = new Faye.Client('http://' + hostname + ':' + portnum + endpoint);

	// Create a private channel with the server.
	//ajax('GET', '/ws/subscribe', function(xhttp){subscribePrivate(xhttp.responseText)});
	
	// Only subscribePrivate once faye makes connection - and gets clientId.
	// I moved this to bottom of <body> on layout, but it doesn't seem to force
	// recent messages to load last all-at-once with private subscription.
	faye.addExtension(FayeExt);
	//faye.connect(subscribePrivate); //(guid());
	fayeSubscribe('/private/server', handlePublishedMessage)
});




// Obsolete?

// Generate random UUID
function guid(){return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)
{var r = Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16);});}


// Super basic ajax call.
function ajax(method, path, callback) {
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", path, true);
  xhttp.setRequestHeader('X-Requested-With','XMLHttpRequest');
  xhttp.onreadystatechange = function() {
    if (xhttp.readyState == 4 && xhttp.status == 200) {
      //document.getElementById("demo").innerHTML = xhttp.responseText;
			//console.log("Connected to private faye channel.");
			callback(xhttp);
    }
  }
  xhttp.send();
}


